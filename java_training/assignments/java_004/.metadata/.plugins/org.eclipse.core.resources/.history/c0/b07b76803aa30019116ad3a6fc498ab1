import java.util.*;
import java.io.*;

public class Assignment01_ThreadControl {

	public static void main(String[] args) throws Exception{

		System.out.println("Main thread is starting");
		MyThread currentThread = null;
		MyThread firstThread = new MyThread("1");
		MyThread secondThread = new MyThread("2");
		MyThread thirdThread = new MyThread("3");
		MyThread fourthThread = new MyThread("4");
		MyThread fifthThread = new MyThread("5");

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String input;
		String controller;
		boolean flag = true;
		boolean firstTimeThrough = true;
		String holder;
		
		//input = br.readLine();
		
		do {
			
			input = br.readLine();
//			if(input.equals("1")) {
//				currentThread = firstThread;
//			}else if(input.equals("2")) {
//				currentThread = secondThread;
//			}else if(input.equals("3")) {
//				currentThread = secondThread;
//			}else if(input.equals("4")) {
//				currentThread = secondThread;
//			}else if(input.equals("5")) {
//				currentThread = secondThread;
//			}

			switch(input) {
			
			
				case "1":{
					
					System.out.println("Controlling thread 1");
					//currentThread = firstThread;
					
					if(firstTimeThrough == true) {
						currentThread = firstThread;
						firstTimeThrough = false;
					}

					System.out.println("Thread priority is: " + currentThread.getMyThreadPriority());
					

//					do {
//						
//						controller = br.readLine();
//						flag = switchStatements(controller.toUpperCase(), firstThread, flag);
//
//					} while (controller.equals("1"));
					
//					if(controller.equals("2")) {
//						continue;
//					}
//					
					break;
				}//end case 1
				
				case "2":{
					System.out.println("Controlling thread 2");
					
					
					if(firstTimeThrough == true) {
						currentThread = secondThread;
						firstTimeThrough = false;
					}
					
					
					break;
				}
				
				case "3":{
					
					if(firstTimeThrough == true) {
						currentThread = thirdThread;
						firstTimeThrough = false;
					}
					
					break;
				}
				case "4":{
					
					if(firstTimeThrough == true) {
						currentThread = fourthThread;
						firstTimeThrough = false;
					}
					
					break;
				}
				case "5":{
					
					if(firstTimeThrough == true) {
						currentThread = fifthThread;
						firstTimeThrough = false;
					}
					
					break;
				}
				
				case "S":{
					
					if(currentThread != null) {
						currentThread.myStop();
					}
					
				}//end case S
				
				case "T":{
					
					if(currentThread != null) {
						currentThread.setMyThreadPriority("T");
					}
					
				}
				
				case "N":{
					
					if(currentThread != null) {
						currentThread.setMyThreadPriority("N");
					}
					
				}
				
				case "L":{
					
					if(currentThread != null) {
						currentThread.setMyThreadPriority("L");
					}
					
				}
							
				default:{
					
				}
				
			
			
			}//end switch statement
			
			//input = br.readLine();
			
		}while(firstThread.isMyThreadAlive());
		
		
		System.out.println("Main thread terminating");
		
	}//end main

	
	
	public static boolean allAlive(MyThread one, MyThread two, MyThread three, MyThread four, MyThread five) {
		
		boolean flag = false;
		
		if(one.isMyThreadAlive() || two.isMyThreadAlive() || three.isMyThreadAlive() || four.isMyThreadAlive() || five.isMyThreadAlive()) {
			flag = true;
		}
		
		return flag;
		
	}//end allAlive
	
	
	public static boolean switchStatements(String input, MyThread myThread, boolean flag) {
								
		switch(input) {
		
			case "1":{
				
				//toggle goes here
				//true will resume thread
				//false will pause thread (wait())
				
				if(flag == true) {
					flag = false;
					myThread.mySuspend();
				}else {
					flag = true;
					myThread.myResume();
				}
				
				break;
			}
			
			case "S":{
				//terminate thread
				//thread.stop
				myThread.myStop();
			}
			
			case "T":{
				//set priority to high
			}
			
			case "L":{
				//set priority to low
			}
			
			case "N":{
				//set priority to normal
			}
		
		
			default:{
				//if controller is 2-5
			}

			
		}
		
		return flag;
		
	}//end switchStatementsMethod
		

	
}//end class
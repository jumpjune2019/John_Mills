import java.util.*;
import java.io.*;

public class Assignment01_ThreadControl {

	public static void main(String[] args) throws Exception{

		System.out.println("Main thread is starting");
		MyThread currentThread = null;
		MyThread firstThread = new MyThread("1");
		MyThread secondThread = new MyThread("2");
		MyThread thirdThread = new MyThread("3");
		MyThread fourthThread = new MyThread("4");
		MyThread fifthThread = new MyThread("5");

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String input;
		int takeControl = 0;

		boolean firstTimeThrough = true;
		
		//input = br.readLine();
		
		do {
			
			try {
			input = br.readLine().toUpperCase();

			switch(input) {
			
			
				case "1":{
					
					
					if(firstTimeThrough == true) {
						currentThread = firstThread;
						firstTimeThrough = false;
					}
					

					if(takeControl == 1) {
						
						if(currentThread == firstThread) {
							
							if(currentThread.isSuspended()) {
								currentThread.myResume();
							}else {
								currentThread.mySuspend();
							}//end innermost if
							
						}//end second if
						
					}else {
						System.out.println("Controlling thread 1");
						takeControl = 1;
					}
				
					
					break;
				}//end case 1
				
				case "2":{
					
					
					if(firstTimeThrough == true) {
						currentThread = secondThread;
						firstTimeThrough = false;
					}
					
					
					if(takeControl == 2) {
						
						if(currentThread == secondThread) {
							
							if(currentThread.isSuspended()) {
								currentThread.myResume();
							}else {
								currentThread.mySuspend();
								
							}//end innermost if
							
						}//end second if
						
					}else {
						System.out.println("Controlling thread 2");

						takeControl = 2;
					}
					
					
					break;
				}
				
				case "3":{
					
					if(firstTimeThrough == true) {
						currentThread = thirdThread;
						firstTimeThrough = false;
					}
					
					if(takeControl == 3) {
						
						if(currentThread == thirdThread) {
							
							if(currentThread.isSuspended()) {
								currentThread.myResume();
							}else {
								currentThread.mySuspend();
								
							}//end innermost if
							
						}//end second if
						
					}else {
						System.out.println("Controlling thread 3");

						takeControl = 3;
					}
					
					
					break;
				}
				case "4":{
					
					if(firstTimeThrough == true) {
						currentThread = fourthThread;
						firstTimeThrough = false;
					}
					
					
					if(takeControl == 4) {
						
						if(currentThread == fourthThread) {
							
							if(currentThread.isSuspended()) {
								currentThread.myResume();
							}else {
								currentThread.mySuspend();
								
							}//end innermost if
							
						}//end second if
						
					}else {
						System.out.println("Controlling thread 4");

						takeControl = 4;
					}
					
					break;
				}
				case "5":{
					
					if(firstTimeThrough == true) {
						currentThread = fifthThread;
						firstTimeThrough = false;
					}
					
					
					if(takeControl == 5) {
						
						if(currentThread == fifthThread) {
							
							if(currentThread.isSuspended()) {
								currentThread.myResume();
							}else {
								currentThread.mySuspend();
								
							}//end innermost if
							
						}//end second if
						
					}else {
						System.out.println("Controlling thread 5");

						takeControl = 5;
					}					
					
					
					break;
				}
				
				case "S":{
					
					if(currentThread != null) {
						
						System.out.println("Permanently stopping the execution of Thread " + currentThread.getMyName());
						currentThread.myStop();
						
						for(int i=0; i < 5; i++) {
						
							if(firstThread.isMyThreadAlive()) {
								System.out.println("thread 1: running");
							}
							if(secondThread.isMyThreadAlive()) {
								System.out.println("thread 2: running");
							}
							if(thirdThread.isMyThreadAlive()) {
								System.out.println("thread 3: running");
							}
							if(fourthThread.isMyThreadAlive()) {
								System.out.println("thread 4: running");
							}
							if(fifthThread.isMyThreadAlive()) {
								System.out.println("thread 5: running");
							}
							
						}//end for loop
						
					}
					
					
					break;
					
				}//end case S
				
				case "T":{
					
					if(currentThread != null) {
						currentThread.setMyThreadPriority("T");
						//System.out.println("The current thread is:" + currentThread.getMyName());
						//System.out.println("Priority is: " + currentThread.getMyThreadPriority());
					}
					break;
					
				}
				
				case "N":{
					
					if(currentThread != null) {
						currentThread.setMyThreadPriority("N");
						//System.out.println("The current thread is:" + currentThread.getMyName());
						//System.out.println("Priority is: " + currentThread.getMyThreadPriority());
					}
					break;
					
				}
				
				case "L":{
					
					if(currentThread != null) {
						currentThread.setMyThreadPriority("L");
						//System.out.println("The current thread is:" + currentThread.getMyName());
						//System.out.println("Priority is: " + currentThread.getMyThreadPriority());
					}
					break;
					
				}
							
				default:{
					throw new WrongInputException();
				}
				
			
			
			}//end switch statement
			
			}catch(WrongInputException e) {
				System.out.println("Push the right button idiot!");
				continue;
			}
			
			//input = br.readLine();
			
		}while(allAlive(firstThread, secondThread, thirdThread, fourthThread, fifthThread));
		
		
		System.out.println("Main thread terminating");
		
	}//end main

	
	
	
	public static boolean allAlive(MyThread one, MyThread two, MyThread three, MyThread four, MyThread five) {
		
		boolean flag = false;
		
		if(one.isMyThreadAlive() || two.isMyThreadAlive() || three.isMyThreadAlive() || four.isMyThreadAlive() || five.isMyThreadAlive()) {
			flag = true;
		}
		
		return flag;
		
	}//end allAlive
	
		

	
}//end class